/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {FlexiCoreDecycle} from './flexiCoreDecycle';
import {Observable} from 'rxjs/Observable';
import "rxjs/add/operator/map";

import {AuthenticationBundle} from '../model/authenticationBundle';
import {AuthenticationRequestHolder} from '../model/authenticationRequestHolder';
import {NewUserUserClass} from '../model/newUserUserClass';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';
import { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';



@Injectable()
export class AuthenticationService {

    protected basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Sign-in into the system, pass an initialized instance of AuthenticationRequestHolder, sign-in name and password are stored there
     * @summary Sign-in(login)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public login(authenticationkey?: string, body?: AuthenticationRequestHolder, extraHttpRequestParams?: any): Observable<AuthenticationBundle> {
        return this.loginWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * log-out from the system
     * @summary Sign-out(logout)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public logout(authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean> {
        return this.logoutWithHttpInfo(authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * Sign-up to the system, pass an initialized instance of NewUser, sign-in name and password are stored there
     * @summary Sign-up(register)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess if true will sign-in too
     * @param body 
     */
    public signin(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, extraHttpRequestParams?: any): Observable<{}> {
        return this.signinWithHttpInfo(authenticationkey, loginuponsuccess, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }


    /**
     * Sign-in(login)
     * Sign-in into the system, pass an initialized instance of AuthenticationRequestHolder, sign-in name and password are stored there
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public loginWithHttpInfo(authenticationkey?: string, body?: AuthenticationRequestHolder, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/authentication/login';

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions =  new HttpRequest(
            'POST',
            path,
            {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).map(o=>FlexiCoreDecycle.retrocycle(o));
    }

    /**
     * Sign-out(logout)
     * log-out from the system
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public logoutWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/authentication/logout';

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions = new HttpRequest(
            'POST',
            path,
            {
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.httpClient.request(requestOptions).map(o=>FlexiCoreDecycle.retrocycle(o));
    }

    /**
     * Sign-up(register)
     * Sign-up to the system, pass an initialized instance of NewUser, sign-in name and password are stored there
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess if true will sign-in too
     * @param body 
     */
    public signinWithHttpInfo(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/authentication/signin';

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (loginuponsuccess !== undefined && loginuponsuccess !== null) {
            headers.set('loginuponsuccess', String(loginuponsuccess));
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions = new HttpRequest(
            'POST',
            path,
            {
                headers: headers,
                body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).map(o=>FlexiCoreDecycle.retrocycle(o));
    }

}
