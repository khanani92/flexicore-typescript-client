/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { FlexiCoreDecycle } from './flexiCoreDecycle';
import { Observable } from 'rxjs/Observable';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import { PaginationResponse } from '../model/models';
import { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';
import { SecurityTenants } from '../model/securityTenant';
import { SecurityTenantsFiltering } from '../model/securityTenantsFiltering';


@Injectable()
export class SecurityTenantsService {

    protected basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
       * 
       * @param apiKey 
       * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
       */
    public getAllSecurityTenants(authenticationkey?: string, body?: SecurityTenantsFiltering, extraHttpRequestParams?: any): Observable<PaginationResponse<SecurityTenants>> {
        return this.getAllSecurityTenantsWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }


    /**
      * 
      * 
      * @param apiKey 
      * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
      */
    public getAllSecurityTenantsWithHttpInfo(authenticationkey?: string, body?: SecurityTenantsFiltering, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/securityTenant/getAll';

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845


        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        headers.set('Content-Type', 'application/json');


        let requestOptions = new HttpRequest(
            'POST',
            path,
            {
                headers: headers,
                body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612

                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.httpClient.request(requestOptions).map(o => FlexiCoreDecycle.retrocycle(o));
    }

}
