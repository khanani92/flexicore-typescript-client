/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core'; 
import { FlexiCoreDecycle } from './flexiCoreDecycle';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import { TotpAuthenticationRequest, TotpAuthenticationResponse, TotpFinishSetupRequest, TotpFinishSetupResponse, TotpRecoverRequest, TotpRecoverResponse, TotpSetupRequest, TotpSetupResponse } from '../model/models';
import { HttpHeaders, HttpClient, HttpResponse, HttpEvent } from '@angular/common/http';


@Injectable()
export class TotpService {

    protected basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     *  
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public authenticateTotp( authenticationkey?: string, body?: TotpAuthenticationRequest, observe?: 'body', reportProgress?: boolean): Observable<TotpAuthenticationResponse>;
    public authenticateTotp( authenticationkey?: string, body?: TotpAuthenticationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotpAuthenticationResponse>>;
    public authenticateTotp( authenticationkey?: string, body?: TotpAuthenticationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotpAuthenticationResponse>>;
    public authenticateTotp( authenticationkey?: string, body?: TotpAuthenticationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationkey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TotpAuthenticationResponse>(`${this.basePath}/totp/authenticateTotp`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     *  
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public finishSetupTotp( authenticationkey?: string, body?: TotpFinishSetupRequest, observe?: 'body', reportProgress?: boolean): Observable<TotpFinishSetupResponse>;
    public finishSetupTotp( authenticationkey?: string, body?: TotpFinishSetupRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotpFinishSetupResponse>>;
    public finishSetupTotp( authenticationkey?: string, body?: TotpFinishSetupRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotpFinishSetupResponse>>;
    public finishSetupTotp( authenticationkey?: string, body?: TotpFinishSetupRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationkey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TotpFinishSetupResponse>(`${this.basePath}/totp/finishSetupTotp`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */

    public recoverTotp( authenticationkey?: string, body?: TotpRecoverRequest, observe?: 'body', reportProgress?: boolean): Observable<TotpRecoverResponse>;
    public recoverTotp( authenticationkey?: string, body?: TotpRecoverRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotpRecoverResponse>>;
    public recoverTotp( authenticationkey?: string, body?: TotpRecoverRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotpRecoverResponse>>;
    public recoverTotp( authenticationkey?: string, body?: TotpRecoverRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationkey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TotpRecoverResponse>(`${this.basePath}/totp/recoverTotp`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */

    public setupTotp( authenticationkey?: string, body?: TotpSetupRequest, observe?: 'body', reportProgress?: boolean): Observable<TotpSetupResponse>;
    public setupTotp( authenticationkey?: string, body?: TotpSetupRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotpSetupResponse>>;
    public setupTotp( authenticationkey?: string, body?: TotpSetupRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotpSetupResponse>>;
    public setupTotp( authenticationkey?: string, body?: TotpSetupRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationkey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TotpSetupResponse>(`${this.basePath}/totp/setupTotp`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }
}
