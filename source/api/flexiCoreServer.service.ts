/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V3.2.0
 * Contact: avishay@flexi-core.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';

import { map } from 'rxjs/operators';
import { Observable }                                      from 'rxjs';


import { FlexiCoreDecycle } from './api';

import { FlexiCoreServer } from '../model/flexiCoreServer';
import { FlexiCoreServerCreate } from '../model/flexiCoreServerCreate';
import { FlexiCoreServerFilter } from '../model/flexiCoreServerFilter';
import { FlexiCoreServerToBaseclass } from '../model/flexiCoreServerToBaseclass';
import { FlexiCoreServerToBaseclassCreate } from '../model/flexiCoreServerToBaseclassCreate';
import { FlexiCoreServerToBaseclassFilter } from '../model/flexiCoreServerToBaseclassFilter';
import { FlexiCoreServerUpdate } from '../model/flexiCoreServerUpdate';
import { OpenFlexiCoreServer } from '../model/openFlexiCoreServer';
import { PaginationResponse } from '../model/paginationResponse';
import { SyncStatusElement } from '../model/syncStatusElement';
import { UserInitiatedSyncJob } from '../model/userInitiatedSyncJob';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FlexiCoreServerService {

    protected basePath = '/FlexiCore';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createFlexiCoreServer
     * Creates FlexiCoreServer
     * @param body 
     * @param authenticationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreServer>;
    public createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreServer>>;
    public createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreServer>>;
    public createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<FlexiCoreServer>(`${this.basePath}/flexicoreServer/createFlexiCoreServer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * createFlexiCoreServerToBaseclass
     * Creates FlexiCoreServerToBaseclass
     * @param body 
     * @param authenticationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreServerToBaseclass>;
    public createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreServerToBaseclass>>;
    public createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreServerToBaseclass>>;
    public createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<FlexiCoreServerToBaseclass>(`${this.basePath}/flexicoreServer/createFlexiCoreServerToBaseclass`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * getFlexiCoreServerToBaseclassLinks
     * returns FlexiCoreServerToBaseclass Links
     * @param body 
     * @param authenticationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<FlexiCoreServerToBaseclass>>;
    public getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<FlexiCoreServerToBaseclass>>>;
    public getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<FlexiCoreServerToBaseclass>>>;
    public getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PaginationResponse<FlexiCoreServerToBaseclass>>(`${this.basePath}/flexicoreServer/getFlexiCoreServerToBaseclassLinks`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * getFlexiCoreServers
     * returns FlexiCore Servers
     * @param body 
     * @param authenticationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<FlexiCoreServer>>;
    public getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<FlexiCoreServer>>>;
    public getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<FlexiCoreServer>>>;
    public getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PaginationResponse<FlexiCoreServer>>(`${this.basePath}/flexicoreServer/getFlexiCoreServers`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * getSyncStatus
     * getSyncStatus
     * @param body 
     * @param authenticationkey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SyncStatusElement>>;
    public getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SyncStatusElement>>>;
    public getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SyncStatusElement>>>;
    public getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationkey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SyncStatusElement>>(`${this.basePath}/plugins/flexiCoreServerToBaseclass/getSyncStatus`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * openConnectionFlexiCoreServer
     * open connction FlexiCoreServer
     * @param body 
     * @param authenticationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/flexicoreServer/openConnectionFlexiCoreServer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * syncBaseclass
     * syncs baseclass
     * @param body 
     * @param authenticationkey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationkey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/flexicoreServer/syncBaseclass`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * updateFlexiCoreServer
     * updates FlexiCoreServer
     * @param body 
     * @param authenticationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreServer>;
    public updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreServer>>;
    public updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreServer>>;
    public updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<FlexiCoreServer>(`${this.basePath}/flexicoreServer/updateFlexiCoreServer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

}
