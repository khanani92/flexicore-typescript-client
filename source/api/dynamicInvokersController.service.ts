/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { PaginationResponse } from '../model/paginationResponse';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import { InvokerInfo } from '../model/invokerInfo';
import { FlexiCoreDecycle } from './api';
import { DynamicInvokerFilter } from '../model/dynamicInvokerFilter';
import { ExecuteInvokerRequest, ExecuteInvokersResponse } from '..';
import { ExportDynamicInvokerToCSVResponse } from '../model/exportDynamicInvokerToCSVResponse';
import { ExportDynamicInvokerToCSVRequest } from '../model/exportDynamicInvokerToCSVRequest';


@Injectable()
export class DynamicInvokersControllerService {

  protected basePath = 'https://169.254.121.191:8080/FlexiCore/rest';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  public executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe?: 'body', reportProgress?: boolean): Observable<ExecuteInvokersResponse>;
  public executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecuteInvokersResponse>>;
  public executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecuteInvokersResponse>>;
  public executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    if (authenticationKey !== undefined && authenticationKey !== null) {
      headers = headers.set('authenticationKey', String(authenticationKey));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ExecuteInvokersResponse>(`${this.basePath}/dynamicInvoker/executeInvoker`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
  }

  /**
     * getAll
     * lists all Invokers
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
  public getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<InvokerInfo>>;
  public getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<InvokerInfo>>>;
  public getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<InvokerInfo>>>;
  public getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    if (authenticationKey !== undefined && authenticationKey !== null) {
      headers = headers.set('authenticationKey', String(authenticationKey));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PaginationResponse<InvokerInfo>>(`${this.basePath}/dynamicInvoker/getAll`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
  }

  public getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<InvokerInfo>>;
  public getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<InvokerInfo>>>;
  public getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<InvokerInfo>>>;
  public getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    if (authenticationKey !== undefined && authenticationKey !== null) {
      headers = headers.set('authenticationKey', String(authenticationKey));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PaginationResponse<InvokerInfo>>(`${this.basePath}/dynamicInvoker/getAllInvokerHolders`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
  }

  public exportDynamicInvokerToCSV(authenticationKey?: string, body?: ExportDynamicInvokerToCSVRequest, observe?: 'body', reportProgress?: boolean): Observable<ExportDynamicInvokerToCSVResponse>;
  public exportDynamicInvokerToCSV(authenticationKey?: string, body?: ExportDynamicInvokerToCSVRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExportDynamicInvokerToCSVResponse>>;
  public exportDynamicInvokerToCSV(authenticationKey?: string, body?: ExportDynamicInvokerToCSVRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExportDynamicInvokerToCSVResponse>>;
  public exportDynamicInvokerToCSV(authenticationKey?: string, body?: ExportDynamicInvokerToCSVRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;
    if (authenticationKey !== undefined && authenticationKey !== null) {
      headers = headers.set('authenticationKey', String(authenticationKey));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ExportDynamicInvokerToCSVResponse>(`${this.basePath}/dynamicInvokers/exportDynamicInvokerToCSV`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    ).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
  }

}
