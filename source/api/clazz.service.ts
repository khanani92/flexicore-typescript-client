/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { map } from 'rxjs/operators';
import { Observable }                                      from 'rxjs';


import { Clazz } from '../model/clazz';
import { ClazzLinkContainer } from '../model/clazzLinkContainer';
import { Operation } from '../model/operation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { HttpClient, HttpEvent, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';
import { FlexiCoreDecycle } from '..';


@Injectable()
export class ClazzService {

    protected basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Get a list of all Operations defined for the this Class, Some Operations have meaning with some Classes only
     * @summary Get all Operations
     * @param clazzName The canonical classname of the link required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getAllOperations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllOperations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllOperations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllOperations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        const path = this.basePath + '/clazz/operations/${clazzName}'
                    .replace('${' + 'clazzName' + '}', String(clazzName));

        let headers = this.defaultHeaders;

        // verify required parameter 'type' is not null or undefined
        if (clazzName === null || clazzName === undefined) {
            throw new Error('Required parameter clazzName was null or undefined when calling get operations.');
        }

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers = headers.set('authenticationKey', String(authenticationkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get(path, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
        }).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * Returns a list of ClazzLinkContainer instances of the given link(!) canonical name
     * @summary Get a list of all associations 
     * @param clazzName 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getAssociations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getAssociationsWithHttpInfo(clazzName, authenticationkey, extraHttpRequestParams)
            .pipe(map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            }));
    }

    /**
     * Return a concrete instance of type Clazz, every type in the system including those created by Plug-ins have a concrete instance of Clazz type describing it.
     * @summary Get a Clazz instance from a canonical name
     * @param clazzName The canonical classname for which the instance is required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getClazz(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Clazz> {
        return this.getClazzWithHttpInfo(clazzName, authenticationkey, extraHttpRequestParams)
            .pipe(map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            }));
    }




    /**
     * Get all Operations
     * Get a list of all Operations defined for the this Class, Some Operations have meaning with some Classes only
     * @param clazzName The canonical classname of the link required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getAllOperationsWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/clazz/operations/${clazzName}'
                    .replace('${' + 'clazzName' + '}', String(clazzName));

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        // verify required parameter 'clazzName' is not null or undefined
        if (clazzName === null || clazzName === undefined) {
            throw new Error('Required parameter clazzName was null or undefined when calling getAllOperations.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions = new HttpRequest(
            'GET',
            path,
            {
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.httpClient.request(requestOptions).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * Get a list of all associations 
     * Returns a list of ClazzLinkContainer instances of the given link(!) canonical name
     * @param clazzName 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getAssociationsWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/clazz/associations/${clazzName}'
                    .replace('${' + 'clazzName' + '}', String(clazzName));

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        // verify required parameter 'clazzName' is not null or undefined
        if (clazzName === null || clazzName === undefined) {
            throw new Error('Required parameter clazzName was null or undefined when calling getAssociations.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions = new HttpRequest(
            'GET',
            path,
            {
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            }
        );
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * Get a Clazz instance from a canonical name
     * Return a concrete instance of type Clazz, every type in the system including those created by Plug-ins have a concrete instance of Clazz type describing it.
     * @param clazzName The canonical classname for which the instance is required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getClazzWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/clazz/${clazzName}'
                    .replace('${' + 'clazzName' + '}', String(clazzName));

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        // verify required parameter 'clazzName' is not null or undefined
        if (clazzName === null || clazzName === undefined) {
            throw new Error('Required parameter clazzName was null or undefined when calling getClazz.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions = new HttpRequest(
            'GET',
            path,
            {
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            }
        );
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.httpClient.request(requestOptions).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

    /**
     * Get Field Containers per class
     * get a list of all FieldContainers per class, use it for the creation of a new instance and for updating one
     * @param clazzName The canonical name of the Class for which the list is to be obtained
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getFieldsWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/clazz/fields/${clazzName}'
                    .replace('${' + 'clazzName' + '}', String(clazzName));

        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845

        // verify required parameter 'clazzName' is not null or undefined
        if (clazzName === null || clazzName === undefined) {
            throw new Error('Required parameter clazzName was null or undefined when calling getFields.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions = new HttpRequest(
            'GET',
            path,
            {
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.httpClient.request(requestOptions).pipe(map(o=>FlexiCoreDecycle.retrocycle(o)));
    }

}
