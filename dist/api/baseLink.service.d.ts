/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { PaginationResponse, Baselink, Baseclass } from '../model/models';
import { BaselinkFilter } from '../model/baselinkFilter';
import { GetConnected } from '../model/getConnected';
import { GetDisconnected } from '../model/getDisconnected';
import { BaselinkUpdate } from '../model/baselinkUpdate';
import { BaselinkMassCreate } from '../model/baselinkMassCreate';
import { BaselinkCreate } from '../model/baselinkCreate';
export declare class BaseLinkService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    getAllBaselinks(authenticationkey?: string, body?: BaselinkFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<Baselink>>;
    getAllBaselinks(authenticationkey?: string, body?: BaselinkFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<Baselink>>>;
    getAllBaselinks(authenticationkey?: string, body?: BaselinkFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<Baselink>>>;
    getDisconnected(authenticationkey?: string, body?: GetDisconnected, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<Baseclass>>;
    getDisconnected(authenticationkey?: string, body?: GetDisconnected, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<Baseclass>>>;
    getDisconnected(authenticationkey?: string, body?: GetDisconnected, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<Baseclass>>>;
    getConnected(authenticationkey?: string, body?: GetConnected, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<Baseclass>>;
    getConnected(authenticationkey?: string, body?: GetConnected, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<Baseclass>>>;
    getConnected(authenticationkey?: string, body?: GetConnected, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<Baseclass>>>;
    massCreateBaselink(authenticationkey?: string, body?: BaselinkMassCreate, observe?: 'body', reportProgress?: boolean): Observable<Array<Baselink>>;
    massCreateBaselink(authenticationkey?: string, body?: BaselinkMassCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Baselink>>>;
    massCreateBaselink(authenticationkey?: string, body?: BaselinkMassCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Baselink>>>;
    createBaselink(authenticationkey?: string, body?: BaselinkCreate, observe?: 'body', reportProgress?: boolean): Observable<Baselink>;
    createBaselink(authenticationkey?: string, body?: BaselinkCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Baselink>>;
    createBaselink(authenticationkey?: string, body?: BaselinkCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Baselink>>;
    updateBaselink(authenticationkey?: string, body?: BaselinkUpdate, observe?: 'body', reportProgress?: boolean): Observable<Baselink>;
    updateBaselink(authenticationkey?: string, body?: BaselinkUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Baselink>>;
    updateBaselink(authenticationkey?: string, body?: BaselinkUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Baselink>>;
}
