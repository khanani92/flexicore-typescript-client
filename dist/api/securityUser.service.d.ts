/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { PaginationResponse } from '../model/models';
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { SecurityUser } from '../model/securityUser';
import { SecurityUserFilter } from '../model/securityUserFilter';
import { SecurityUserUpdate } from '../model/securityUserUpdate';
import { SecurityUserCreate } from '../model/securityUserCreate';
export declare class SecurityUserService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * getAll
     * lists all Invokers
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllSecurityUser(authenticationKey?: string, body?: SecurityUserFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<SecurityUser>>;
    getAllSecurityUser(authenticationKey?: string, body?: SecurityUserFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<SecurityUser>>>;
    getAllSecurityUser(authenticationKey?: string, body?: SecurityUserFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<SecurityUser>>>;
    /**
  * createSecurityUser
  * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
  * @param body
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */
    createSecurityUser(authenticationKey?: string, body?: SecurityUserCreate, observe?: 'body', reportProgress?: boolean): Observable<SecurityUser>;
    createSecurityUser(authenticationKey?: string, body?: SecurityUserCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityUser>>;
    createSecurityUser(authenticationKey?: string, body?: SecurityUserCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityUser>>;
    /**
 * updateSecurityUser
 * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
 * @param body
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    updateSecurityUser(authenticationKey?: string, body?: SecurityUserUpdate, observe?: 'body', reportProgress?: boolean): Observable<SecurityUser>;
    updateSecurityUser(authenticationKey?: string, body?: SecurityUserUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityUser>>;
    updateSecurityUser(authenticationKey?: string, body?: SecurityUserUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityUser>>;
}
