"use strict";
/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantsService = void 0;
/* tslint:disable:no-unused-variable member-ordering */
const core_1 = require("@angular/core");
const flexiCoreDecycle_1 = require("./flexiCoreDecycle");
const operators_1 = require("rxjs/operators");
const variables_1 = require("../variables");
const configuration_1 = require("../configuration");
const http_1 = require("@angular/common/http");
let TenantsService = class TenantsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
        this.defaultHeaders = new http_1.HttpHeaders();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    extendObj(objA, objB) {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenant(tenantName, apiKey, authenticationkey, body, extraHttpRequestParams) {
        return this.createTenantWithHttpInfo(tenantName, apiKey, authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
 *
 * @param tenantName
 * @param apiKey
 * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
 * @param body
 */
    createTenantNew(authenticationkey, body, extraHttpRequestParams) {
        return this.createTenantNewWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
*
* @param tenantName
* @param apiKey
* @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
* @param body
*/
    updateTenantNew(authenticationkey, body, extraHttpRequestParams) {
        return this.updateTenantNewWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createTenantNoUser(tenantName, apiKey, authenticationkey, extraHttpRequestParams) {
        return this.createTenantNoUserWithHttpInfo(tenantName, apiKey, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getTenant(apiKey, authenticationkey, extraHttpRequestParams) {
        return this.getTenantWithHttpInfo(apiKey, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
       *
       * @param apiKey
       * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
       */
    getAllTenants(authenticationkey, body, extraHttpRequestParams) {
        return this.getAllTenantsWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getTenants(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.getTenantsWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenantWithHttpInfo(tenantName, apiKey, authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/tenant/${tenant_name}/${apiKey}'
            .replace('${' + 'tenant_name' + '}', String(tenantName))
            .replace('${' + 'apiKey' + '}', String(apiKey));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenantName' is not null or undefined
        if (tenantName === null || tenantName === undefined) {
            throw new Error('Required parameter tenantName was null or undefined when calling createTenant.');
        }
        // verify required parameter 'apiKey' is not null or undefined
        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling createTenant.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateTenantNewWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/tenant/updateTenant';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenantNewWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/tenant/createTenant';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createTenantNoUserWithHttpInfo(tenantName, apiKey, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/tenant/createTenantNoUser/${tenant_name}/${apiKey}'
            .replace('${' + 'tenant_name' + '}', String(tenantName))
            .replace('${' + 'apiKey' + '}', String(apiKey));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenantName' is not null or undefined
        if (tenantName === null || tenantName === undefined) {
            throw new Error('Required parameter tenantName was null or undefined when calling createTenantNoUser.');
        }
        // verify required parameter 'apiKey' is not null or undefined
        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling createTenantNoUser.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
  *
  *
  * @param apiKey
  * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
  */
    getAllTenantsWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/tenant/getAllTenants';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getTenantWithHttpInfo(apiKey, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/tenant/${apiKey}'
            .replace('${' + 'apiKey' + '}', String(apiKey));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'apiKey' is not null or undefined
        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling getTenant.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('GET', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getTenantsWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/tenant';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
};
TenantsService = __decorate([
    (0, core_1.Injectable)(),
    __param(1, (0, core_1.Optional)()),
    __param(1, (0, core_1.Inject)(variables_1.BASE_PATH)),
    __param(2, (0, core_1.Optional)())
], TenantsService);
exports.TenantsService = TenantsService;
//# sourceMappingURL=tenants.service.js.map