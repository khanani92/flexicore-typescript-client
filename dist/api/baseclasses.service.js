"use strict";
/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseclassesService = void 0;
/* tslint:disable:no-unused-variable member-ordering */
const core_1 = require("@angular/core");
const flexiCoreDecycle_1 = require("./flexiCoreDecycle");
const operators_1 = require("rxjs/operators");
const variables_1 = require("../variables");
const configuration_1 = require("../configuration");
const http_1 = require("@angular/common/http");
let BaseclassesService = class BaseclassesService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
        this.defaultHeaders = new http_1.HttpHeaders();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    extendObj(objA, objB) {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     *
     * @param type
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    count(type, authenticationkey, body, extraHttpRequestParams) {
        return this.countWithHttpInfo(type, authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countConnected(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        return this.countConnectedWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countDisconnected(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        return this.countDisconnectedWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * Creates a link between two instances in a generic way, provide values of the link
     * @summary Create a link
     * @param leftId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param rightId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value The ID of any instance inheriting from FC Baseclass, this effectively creates a triple link
     * @param simpleValue An explicit value of a string that can be part of the link
     * @param check If true, check if the link with these Left, Right and Complex Value values exists, if yes, then it will not be created
     */
    createBaselink(leftId, rightId, linkClazzName, authenticationkey, value, simpleValue, check, extraHttpRequestParams) {
        return this.createBaselinkWithHttpInfo(leftId, rightId, linkClazzName, authenticationkey, value, simpleValue, check, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * deletes an entity by id
     * @summary delete
     * @param id The id of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteById(id, authenticationkey, extraHttpRequestParams) {
        return this.deleteByIdWithHttpInfo(id, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * deletes an entity by id
     * @summary delete
     * @param id The id of the instance to be deleted
     * @param className The type of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteById_1(id, className, authenticationkey, extraHttpRequestParams) {
        return this.deleteById_1WithHttpInfo(id, className, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * Remove an existing link by the ID of its 'sides'
     * @summary Remove a link
     * @param leftId The ID of the left side of the link
     * @param rightId The ID of the right side of the link
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    detachEntities(leftId, rightId, linkClazzName, authenticationkey, extraHttpRequestParams) {
        return this.detachEntitiesWithHttpInfo(leftId, rightId, linkClazzName, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * duplicate an entity by Id , returns null if not successfully duplicated
     * @summary duplicate an entity, shallow by id
     * @param id The ID of the entity required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    duplicate(id, authenticationkey, extraHttpRequestParams) {
        return this.duplicateWithHttpInfo(id, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * exports to file
     * @summary export baseclass
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportBaseclass(id, authenticationkey, extraHttpRequestParams) {
        return this.exportBaseclassWithHttpInfo(id, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * Find an entity by Id and type, returns null if not found
     * @summary find entity by id and class
     * @param id The ID of the entity required
     * @param classname The canonical classname of the required entity
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById(id, classname, authenticationkey, extraHttpRequestParams) {
        return this.findByIdWithHttpInfo(id, classname, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * Find an instance of a Baseclass extender by its id, returns an instance of a Baseclass
     * @summary Find an instance by ID
     * @param ID The id of instance to be foundw
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById_2(ID, authenticationkey, extraHttpRequestParams) {
        return this.findById_2WithHttpInfo(ID, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * returns a list of instances of the type requested
     * @summary Find an instance by its name
     * @param name The name of instance to be found
     * @param classname The cannonical classname of the instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findByName(name, classname, authenticationkey, extraHttpRequestParams) {
        return this.findByNameWithHttpInfo(name, classname, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     */
    findBySidesId(left, right, classname, authenticationkey, value, simpleValue, extraHttpRequestParams) {
        return this.findBySidesIdWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinks(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.findLinksWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksContainers(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.findLinksContainersWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksValues(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.findLinksValuesWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getConnected(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        return this.getConnectedWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
  *
  * @param wantedClazzName
  * @param id
  * @param linkClazzName
  * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
  * @param body filtering information
  * @param pagesize Number of entries to be retrieved per page or -1 for full list
  * @param currentpage The current page or -1 for full list
  */
    getConnectedClasses(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        return this.getConnectedClassesWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param id
     * @param wantedClazzName
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getDisconnected(id, wantedClazzName, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        return this.getDisconnectedWithHttpInfo(id, wantedClazzName, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * import baseclass
     * @summary import baseclass
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    importBaseclass(className, authenticationkey, body, extraHttpRequestParams) {
        return this.importBaseclassWithHttpInfo(className, authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     * @param leftId
     * @param rightId
     * @param operationId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    linkBaseclassTouser(leftId, rightId, operationId, authenticationkey, extraHttpRequestParams) {
        return this.linkBaseclassTouserWithHttpInfo(leftId, rightId, operationId, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * Helper class for linking Role and User using a RoleUserContainer class, can be carried out by using the Generic createBaselink call
     * @summary Link Role and User
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    linkroleuser(authenticationkey, body, extraHttpRequestParams) {
        return this.linkroleuserWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * returns a list of instances of the type requested
     * @summary Find an instance by its name with wildcard
     * @param classname The canonical classname of the required entity list
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    nameLike(classname, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.nameLikeWithHttpInfo(classname, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * soft delete baseclass
     * @summary softDelete
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    softDelete(id, authenticationkey, extraHttpRequestParams) {
        return this.softDeleteWithHttpInfo(id, authenticationkey, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     * Update an instance of a Baseclass using a BasicContainer instance
     * @summary Update basic data
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateBasicDetails(authenticationkey, body, extraHttpRequestParams) {
        return this.updateBasicDetailsWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    /**
     *
     *
     * @param type
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    countWithHttpInfo(type, authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/count/${type}'
            .replace('${' + 'type' + '}', String(type));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling count.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
       *
       *
       * @param wantedClazzName
       * @param id
       * @param linkClazzName
       * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
       * @param body filtering information
       * @param pagesize Number of entries to be retrieved per page or -1 for full list
       * @param currentpage The current page or -1 for full list
       */
    countConnectedWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/countConnected/${wantedClazzName}/${id}/${linkClazzName}'
            .replace('${' + 'wantedClazzName' + '}', String(wantedClazzName))
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'wantedClazzName' is not null or undefined
        if (wantedClazzName === null || wantedClazzName === undefined) {
            throw new Error('Required parameter wantedClazzName was null or undefined when calling countConnected.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling countConnected.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling countConnected.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        if (valueId !== undefined && valueId !== null) {
            headers.set('valueId', String(valueId));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countDisconnectedWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/countDisconnected/${wantedClazzName}/${id}/${linkClazzName}'
            .replace('${' + 'wantedClazzName' + '}', String(wantedClazzName))
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'wantedClazzName' is not null or undefined
        if (wantedClazzName === null || wantedClazzName === undefined) {
            throw new Error('Required parameter wantedClazzName was null or undefined when calling countDisconnected.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling countDisconnected.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling countDisconnected.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        if (valueId !== undefined && valueId !== null) {
            headers.set('valueId', String(valueId));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Create a link
     * Creates a link between two instances in a generic way, provide values of the link
     * @param leftId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param rightId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value The ID of any instance inheriting from FC Baseclass, this effectively creates a triple link
     * @param simpleValue An explicit value of a string that can be part of the link
     * @param check If true, check if the link with these Left, Right and Complex Value values exists, if yes, then it will not be created
     */
    createBaselinkWithHttpInfo(leftId, rightId, linkClazzName, authenticationkey, value, simpleValue, check, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/${leftId}/${linkClazzName}/${rightId}'
            .replace('${' + 'leftId' + '}', String(leftId))
            .replace('${' + 'rightId' + '}', String(rightId))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'leftId' is not null or undefined
        if (leftId === null || leftId === undefined) {
            throw new Error('Required parameter leftId was null or undefined when calling createBaselink.');
        }
        // verify required parameter 'rightId' is not null or undefined
        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling createBaselink.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling createBaselink.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        if (check !== undefined && check !== null) {
            headers.set('check', String(check));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * delete
     * deletes an entity by id
     * @param id The id of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteByIdWithHttpInfo(id, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/${id}'
            .replace('${' + 'id' + '}', String(id));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteById.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [];
        let requestOptions = new http_1.HttpRequest('DELETE', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * delete
     * deletes an entity by id
     * @param id The id of the instance to be deleted
     * @param className The type of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteById_1WithHttpInfo(id, className, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/${class_name}/${id}'
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'class_name' + '}', String(className));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteById_1.');
        }
        // verify required parameter 'className' is not null or undefined
        if (className === null || className === undefined) {
            throw new Error('Required parameter className was null or undefined when calling deleteById_1.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [];
        let requestOptions = new http_1.HttpRequest('DELETE', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Remove a link
     * Remove an existing link by the ID of its &#39;sides&#39;
     * @param leftId The ID of the left side of the link
     * @param rightId The ID of the right side of the link
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    detachEntitiesWithHttpInfo(leftId, rightId, linkClazzName, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/${leftId}/${linkClazzName}/${rightId}'
            .replace('${' + 'leftId' + '}', String(leftId))
            .replace('${' + 'rightId' + '}', String(rightId))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'leftId' is not null or undefined
        if (leftId === null || leftId === undefined) {
            throw new Error('Required parameter leftId was null or undefined when calling detachEntities.');
        }
        // verify required parameter 'rightId' is not null or undefined
        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling detachEntities.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling detachEntities.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('DELETE', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * duplicate an entity, shallow by id
     * duplicate an entity by Id , returns null if not successfully duplicated
     * @param id The ID of the entity required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    duplicateWithHttpInfo(id, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/clone/${id}'
            .replace('${' + 'id' + '}', String(id));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling duplicate.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('GET', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * export baseclass
     * exports to file
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportBaseclassWithHttpInfo(id, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/exportBaseclass/${id}'
            .replace('${' + 'id' + '}', String(id));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportBaseclass.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('PUT', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * export baseclass
     * exports to file
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setBaseclassTenant(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/setBaseclassTenant/';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('PUT', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * find entity by id and class
     * Find an entity by Id and type, returns null if not found
     * @param id The ID of the entity required
     * @param classname The canonical classname of the required entity
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findByIdWithHttpInfo(id, classname, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/getbyid/${id}/${classname}'
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findById.');
        }
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling findById.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('GET', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Find an instance by ID
     * Find an instance of a Baseclass extender by its id, returns an instance of a Baseclass
     * @param ID The id of instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById_2WithHttpInfo(ID, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/${id}'
            .replace('${' + 'id' + '}', String(ID));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ID' is not null or undefined
        if (ID === null || ID === undefined) {
            throw new Error('Required parameter ID was null or undefined when calling findById_2.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('GET', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Find an instance by its name
     * returns a list of instances of the type requested
     * @param name The name of instance to be found
     * @param classname The cannonical classname of the instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findByNameWithHttpInfo(name, classname, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/${name}/${classname}'
            .replace('${' + 'Name' + '}', String(name))
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling findByName.');
        }
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling findByName.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('GET', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     */
    findBySidesIdWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/${left}/${right}/${classname}'
            .replace('${' + 'left' + '}', String(left))
            .replace('${' + 'right' + '}', String(right))
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'left' is not null or undefined
        if (left === null || left === undefined) {
            throw new Error('Required parameter left was null or undefined when calling findBySidesId.');
        }
        // verify required parameter 'right' is not null or undefined
        if (right === null || right === undefined) {
            throw new Error('Required parameter right was null or undefined when calling findBySidesId.');
        }
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling findBySidesId.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('GET', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/findLinks/${left}/${right}/${classname}'
            .replace('${' + 'left' + '}', String(left))
            .replace('${' + 'right' + '}', String(right))
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'left' is not null or undefined
        if (left === null || left === undefined) {
            throw new Error('Required parameter left was null or undefined when calling findLinks.');
        }
        // verify required parameter 'right' is not null or undefined
        if (right === null || right === undefined) {
            throw new Error('Required parameter right was null or undefined when calling findLinks.');
        }
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling findLinks.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            path,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksContainersWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/findLinksContainers/${left}/${right}/${classname}'
            .replace('${' + 'left' + '}', String(left))
            .replace('${' + 'right' + '}', String(right))
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'left' is not null or undefined
        if (left === null || left === undefined) {
            throw new Error('Required parameter left was null or undefined when calling findLinksContainers.');
        }
        // verify required parameter 'right' is not null or undefined
        if (right === null || right === undefined) {
            throw new Error('Required parameter right was null or undefined when calling findLinksContainers.');
        }
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling findLinksContainers.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksValuesWithHttpInfo(left, right, classname, authenticationkey, value, simpleValue, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/findLinksValues/${left}/${right}/${classname}'
            .replace('${' + 'left' + '}', String(left))
            .replace('${' + 'right' + '}', String(right))
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'left' is not null or undefined
        if (left === null || left === undefined) {
            throw new Error('Required parameter left was null or undefined when calling findLinksValues.');
        }
        // verify required parameter 'right' is not null or undefined
        if (right === null || right === undefined) {
            throw new Error('Required parameter right was null or undefined when calling findLinksValues.');
        }
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling findLinksValues.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    getFilterClassInfo(authenticationkey, body, extraHttpRequestParams) {
        return this.getFilterClassInfoWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    getFilterClassInfoWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/getFilterClassInfo';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    getClassInfo(authenticationkey, body, extraHttpRequestParams) {
        return this.getClassInfoWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    getExample(authenticationkey, body, extraHttpRequestParams) {
        return this.getExampleWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                ``;
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    getClassInfoWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/getClassInfo';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    getExampleWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/getExample';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    listInheritingClasses(authenticationkey, body, extraHttpRequestParams) {
        return this.listInheritingClassesWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    listInheritingClassesWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/listInheritingClasses';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    listAllBaseclassGeneric(authenticationkey, body, extraHttpRequestParams) {
        return this.listAllBaseclassGenericWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    listAllBaseclassGenericWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/listAllBaseclassGeneric';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    exportBaseclassGeneric(authenticationkey, body, extraHttpRequestParams) {
        return this.exportBaseclassGenericWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .pipe((0, operators_1.map)((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        }));
    }
    exportBaseclassGenericWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/exportBaseclassGeneric';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getConnectedWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/connected/${wantedClazzName}/${id}/${linkClazzName}'
            .replace('${' + 'wantedClazzName' + '}', String(wantedClazzName))
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'wantedClazzName' is not null or undefined
        if (wantedClazzName === null || wantedClazzName === undefined) {
            throw new Error('Required parameter wantedClazzName was null or undefined when calling getConnected.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConnected.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling getConnected.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        if (valueId !== undefined && valueId !== null) {
            headers.set('valueId', String(valueId));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getConnectedClassesWithHttpInfo(wantedClazzName, id, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/connectedClasses/${wantedClazzName}/${id}/${linkClazzName}'
            .replace('${' + 'wantedClazzName' + '}', String(wantedClazzName))
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'wantedClazzName' is not null or undefined
        if (wantedClazzName === null || wantedClazzName === undefined) {
            throw new Error('Required parameter wantedClazzName was null or undefined when calling getConnected.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConnected.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling getConnected.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        if (valueId !== undefined && valueId !== null) {
            headers.set('valueId', String(valueId));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param id
     * @param wantedClazzName
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getDisconnectedWithHttpInfo(id, wantedClazzName, linkClazzName, authenticationkey, body, pagesize, currentpage, valueId, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/disconnected/${wantedClazzName}/${id}/${linkClazzName}'
            .replace('${' + 'id' + '}', String(id))
            .replace('${' + 'wantedClazzName' + '}', String(wantedClazzName))
            .replace('${' + 'linkClazzName' + '}', String(linkClazzName));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDisconnected.');
        }
        // verify required parameter 'wantedClazzName' is not null or undefined
        if (wantedClazzName === null || wantedClazzName === undefined) {
            throw new Error('Required parameter wantedClazzName was null or undefined when calling getDisconnected.');
        }
        // verify required parameter 'linkClazzName' is not null or undefined
        if (linkClazzName === null || linkClazzName === undefined) {
            throw new Error('Required parameter linkClazzName was null or undefined when calling getDisconnected.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        if (valueId !== undefined && valueId !== null) {
            headers.set('valueId', String(valueId));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * import baseclass
     * import baseclass
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    importBaseclassWithHttpInfo(className, authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/importBaseclass/${className}'
            .replace('${' + 'className' + '}', String(className));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'className' is not null or undefined
        if (className === null || className === undefined) {
            throw new Error('Required parameter className was null or undefined when calling importBaseclass.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('PUT', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     *
     *
     * @param leftId
     * @param rightId
     * @param operationId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    linkBaseclassTouserWithHttpInfo(leftId, rightId, operationId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/linkUserToBaseclass/${left_id}/${right_id}/${operation_id}'
            .replace('${' + 'left_id' + '}', String(leftId))
            .replace('${' + 'right_id' + '}', String(rightId))
            .replace('${' + 'operation_id' + '}', String(operationId));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'leftId' is not null or undefined
        if (leftId === null || leftId === undefined) {
            throw new Error('Required parameter leftId was null or undefined when calling linkBaseclassTouser.');
        }
        // verify required parameter 'rightId' is not null or undefined
        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling linkBaseclassTouser.');
        }
        // verify required parameter 'operationId' is not null or undefined
        if (operationId === null || operationId === undefined) {
            throw new Error('Required parameter operationId was null or undefined when calling linkBaseclassTouser.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('PUT', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Link Role and User
     * Helper class for linking Role and User using a RoleUserContainer class, can be carried out by using the Generic createBaselink call
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    linkroleuserWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baselinks/linkroleuser';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Find an instance by its name with wildcard
     * returns a list of instances of the type requested
     * @param classname The canonical classname of the required entity list
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    nameLikeWithHttpInfo(classname, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/like/name/${classname}'
            .replace('${' + 'classname' + '}', String(classname));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'classname' is not null or undefined
        if (classname === null || classname === undefined) {
            throw new Error('Required parameter classname was null or undefined when calling nameLike.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('POST', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * softDelete
     * soft delete baseclass
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    softDeleteWithHttpInfo(id, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass/softDelete/${id}'
            .replace('${' + 'id' + '}', String(id));
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling softDelete.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_1.HttpRequest('DELETE', path, {
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    /**
     * Update basic data
     * Update an instance of a Baseclass using a BasicContainer instance
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateBasicDetailsWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/baseclass';
        let queryParameters = new URLSearchParams();
        let headers = this.defaultHeaders; // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_1.HttpRequest('PUT', path, {
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.httpClient.request(requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
    genericSoftDelete(body, authenticationKey, observe = 'body', reportProgress = false) {
        let headers = this.defaultHeaders;
        if (authenticationKey !== undefined && authenticationKey !== null) {
            headers = headers.set('authenticationKey', String(authenticationKey));
        }
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        const requestOptions = {
            headers,
            body,
            withCredentials: this.configuration.withCredentials,
            observe: observe,
            reportProgress: reportProgress
        };
        return this.httpClient.delete(`${this.basePath}/generic/softDelete`, requestOptions).pipe((0, operators_1.map)(o => flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(o)));
    }
};
BaseclassesService = __decorate([
    (0, core_1.Injectable)(),
    __param(1, (0, core_1.Optional)()),
    __param(1, (0, core_1.Inject)(variables_1.BASE_PATH)),
    __param(2, (0, core_1.Optional)())
], BaseclassesService);
exports.BaseclassesService = BaseclassesService;
//# sourceMappingURL=baseclasses.service.js.map