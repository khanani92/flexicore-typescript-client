/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V3.2.0
 * Contact: avishay@flexi-core.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FlexiCoreServer } from '../model/flexiCoreServer';
import { FlexiCoreServerCreate } from '../model/flexiCoreServerCreate';
import { FlexiCoreServerFilter } from '../model/flexiCoreServerFilter';
import { FlexiCoreServerToBaseclass } from '../model/flexiCoreServerToBaseclass';
import { FlexiCoreServerToBaseclassCreate } from '../model/flexiCoreServerToBaseclassCreate';
import { FlexiCoreServerToBaseclassFilter } from '../model/flexiCoreServerToBaseclassFilter';
import { FlexiCoreServerUpdate } from '../model/flexiCoreServerUpdate';
import { OpenFlexiCoreServer } from '../model/openFlexiCoreServer';
import { PaginationResponse } from '../model/paginationResponse';
import { SyncStatusElement } from '../model/syncStatusElement';
import { UserInitiatedSyncJob } from '../model/userInitiatedSyncJob';
import { Configuration } from '../configuration';
export declare class FlexiCoreServerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * createFlexiCoreServer
     * Creates FlexiCoreServer
     * @param body
     * @param authenticationKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreServer>;
    createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreServer>>;
    createFlexiCoreServer(body?: FlexiCoreServerCreate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreServer>>;
    /**
     * createFlexiCoreServerToBaseclass
     * Creates FlexiCoreServerToBaseclass
     * @param body
     * @param authenticationKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreServerToBaseclass>;
    createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreServerToBaseclass>>;
    createFlexiCoreServerToBaseclass(body?: FlexiCoreServerToBaseclassCreate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreServerToBaseclass>>;
    /**
     * getFlexiCoreServerToBaseclassLinks
     * returns FlexiCoreServerToBaseclass Links
     * @param body
     * @param authenticationKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<FlexiCoreServerToBaseclass>>;
    getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<FlexiCoreServerToBaseclass>>>;
    getFlexiCoreServerToBaseclassLinks(body?: FlexiCoreServerToBaseclassFilter, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<FlexiCoreServerToBaseclass>>>;
    /**
     * getFlexiCoreServers
     * returns FlexiCore Servers
     * @param body
     * @param authenticationKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<FlexiCoreServer>>;
    getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<FlexiCoreServer>>>;
    getFlexiCoreServers(body?: FlexiCoreServerFilter, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<FlexiCoreServer>>>;
    /**
     * getSyncStatus
     * getSyncStatus
     * @param body
     * @param authenticationkey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SyncStatusElement>>;
    getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SyncStatusElement>>>;
    getSyncStatus(body?: FlexiCoreServerToBaseclassFilter, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SyncStatusElement>>>;
    /**
     * openConnectionFlexiCoreServer
     * open connction FlexiCoreServer
     * @param body
     * @param authenticationKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    openConnectionFlexiCoreServer(body?: OpenFlexiCoreServer, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * syncBaseclass
     * syncs baseclass
     * @param body
     * @param authenticationkey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    syncBaseclass(body?: UserInitiatedSyncJob, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * updateFlexiCoreServer
     * updates FlexiCoreServer
     * @param body
     * @param authenticationKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreServer>;
    updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreServer>>;
    updateFlexiCoreServer(body?: FlexiCoreServerUpdate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreServer>>;
}
