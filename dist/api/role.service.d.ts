/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { PaginationResponse } from '../model/models';
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Role } from '../model/role';
import { RoleFilter } from '../model/roleFilter';
import { RoleCreate } from '../model/roleCreate';
import { RoleUpdate } from '../model/roleUpdate';
export declare class RoleService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * getAll
     * lists all Invokers
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllRole(authenticationKey?: string, body?: RoleFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<Role>>;
    getAllRole(authenticationKey?: string, body?: RoleFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<Role>>>;
    getAllRole(authenticationKey?: string, body?: RoleFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<Role>>>;
    /**
    * createRole
    * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
    * @param body
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    createRole(authenticationKey?: string, body?: RoleCreate, observe?: 'body', reportProgress?: boolean): Observable<Role>;
    createRole(authenticationKey?: string, body?: RoleCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Role>>;
    createRole(authenticationKey?: string, body?: RoleCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Role>>;
    /**
 * updateRole
 * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
 * @param body
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
    updateRole(authenticationKey?: string, body?: RoleUpdate, observe?: 'body', reportProgress?: boolean): Observable<Role>;
    updateRole(authenticationKey?: string, body?: RoleUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Role>>;
    updateRole(authenticationKey?: string, body?: RoleUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Role>>;
}
