/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Observable } from 'rxjs';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { NewUser } from '../model/newUser';
import { Tenant } from '../model/tenant';
import { Configuration } from '../configuration';
import { TenantCreate } from '../model/tenantCreate';
import { TenantUpdate } from '../model/tenantUpdate';
import { TenantFiltering } from '../model/tenantFiltering';
import { PaginationResponse } from '../model/models';
import { HttpClient, HttpHeaders } from '@angular/common/http';
export declare class TenantsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenant(tenantName: string, apiKey: string, authenticationkey?: string, body?: NewUser, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
 *
 * @param tenantName
 * @param apiKey
 * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
 * @param body
 */
    createTenantNew(authenticationkey?: string, body?: TenantCreate, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
*
* @param tenantName
* @param apiKey
* @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
* @param body
*/
    updateTenantNew(authenticationkey?: string, body?: TenantUpdate, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createTenantNoUser(tenantName: string, apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
     *
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getTenant(apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
       *
       * @param apiKey
       * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
       */
    getAllTenants(authenticationkey?: string, body?: TenantFiltering, extraHttpRequestParams?: any): Observable<PaginationResponse<Tenant>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getTenants(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Tenant>>;
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenantWithHttpInfo(tenantName: string, apiKey: string, authenticationkey?: string, body?: NewUser, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateTenantNewWithHttpInfo(authenticationkey?: string, body?: TenantUpdate, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenantNewWithHttpInfo(authenticationkey?: string, body?: TenantCreate, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createTenantNoUserWithHttpInfo(tenantName: string, apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
  *
  *
  * @param apiKey
  * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
  */
    getAllTenantsWithHttpInfo(authenticationkey?: string, body?: TenantFiltering, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getTenantWithHttpInfo(apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getTenantsWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
}
