/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Observable } from 'rxjs';
import { AuthenticationBundle } from '../model/authenticationBundle';
import { AuthenticationRequestHolder } from '../model/authenticationRequestHolder';
import { NewUserUserClass } from '../model/newUserUserClass';
import { Configuration } from '../configuration';
import { HttpClient, HttpHeaders } from '@angular/common/http';
export declare class AuthenticationService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Sign-in into the system, pass an initialized instance of AuthenticationRequestHolder, sign-in name and password are stored there
     * @summary Sign-in(login)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    login(authenticationkey?: string, body?: AuthenticationRequestHolder, extraHttpRequestParams?: any): Observable<AuthenticationBundle>;
    /**
     * log-out from the system
     * @summary Sign-out(logout)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    logout(authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * Sign-up to the system, pass an initialized instance of NewUser, sign-in name and password are stored there
     * @summary Sign-up(register)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess if true will sign-in too
     * @param body
     */
    signin(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * Sign-in(login)
     * Sign-in into the system, pass an initialized instance of AuthenticationRequestHolder, sign-in name and password are stored there
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    loginWithHttpInfo(authenticationkey?: string, body?: AuthenticationRequestHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Sign-out(logout)
     * log-out from the system
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    logoutWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Sign-up(register)
     * Sign-up to the system, pass an initialized instance of NewUser, sign-in name and password are stored there
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess if true will sign-in too
     * @param body
     */
    signinWithHttpInfo(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, extraHttpRequestParams?: any): Observable<Response>;
}
