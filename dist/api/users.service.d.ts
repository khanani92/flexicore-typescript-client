/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { NewUserUserClass } from '../model/newUserUserClass';
import { ResetUserPasswordRequest } from '../model/resetUserPasswordRequest';
import { RunningUser } from '../model/runningUser';
import { UserClass } from '../model/userClass';
import { Configuration } from '../configuration';
import { UserProfileRequest } from '../model/userProfileRequest';
import { UserProfile } from '../model/userProfile';
import { UserCreate, UserUpdate, UserFiltering, PaginationResponse, ImpersonateRequest, ImpersonateResponse, ResetPasswordFinishResponse } from '../model/models';
export declare class UsersService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     *
     * @param roleId
     * @param userId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addUserToRole(roleId: string, userId: string, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    addUserToRole(roleId: string, userId: string, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    addUserToRole(roleId: string, userId: string, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    attachTenant(authenticationkey?: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    attachTenant(authenticationkey?: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    attachTenant(authenticationkey?: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    connectToTenant(authenticationkey?: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    connectToTenant(authenticationkey?: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    connectToTenant(authenticationkey?: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createUser(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, observe?: 'body', reportProgress?: boolean): Observable<RunningUser>;
    createUser(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RunningUser>>;
    createUser(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RunningUser>>;
    /**
    *
    *
    * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
    * @param loginuponsuccess
    * @param body
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    getUserProfile(authenticationkey?: string, body?: UserProfileRequest, observe?: 'body', reportProgress?: boolean): Observable<UserProfile>;
    getUserProfile(authenticationkey?: string, body?: UserProfileRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfile>>;
    getUserProfile(authenticationkey?: string, body?: UserProfileRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfile>>;
    /**
  *
  *
  * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
  * @param loginuponsuccess
  * @param body
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */
    impersonate(authenticationkey?: string, body?: ImpersonateRequest, observe?: 'body', reportProgress?: boolean): Observable<ImpersonateResponse>;
    impersonate(authenticationkey?: string, body?: ImpersonateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ImpersonateResponse>>;
    impersonate(authenticationkey?: string, body?: ImpersonateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ImpersonateResponse>>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listAllUsers(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, observe?: 'body', reportProgress?: boolean): Observable<Array<UserClass>>;
    listAllUsers(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserClass>>>;
    listAllUsers(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserClass>>>;
    /**
    *
    *
    * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
    * @param pagesize Number of entries to be retrieved per page or -1 for full list
    * @param currentpage The current page or -1 for full list
    * @param body
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    getAllUsers(authenticationkey?: string, body?: UserFiltering, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<UserClass>>;
    getAllUsers(authenticationkey?: string, body?: UserFiltering, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<UserClass>>>;
    getAllUsers(authenticationkey?: string, body?: UserFiltering, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<UserClass>>>;
    /**
    *
    *
    * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
    * @param body
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    updateUser(authenticationkey?: string, body?: UserUpdate, observe?: 'body', reportProgress?: boolean): Observable<UserClass>;
    updateUser(authenticationkey?: string, body?: UserUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserClass>>;
    updateUser(authenticationkey?: string, body?: UserUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserClass>>;
    /**
    *
    *
    * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
    * @param body
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    createUserNew(authenticationkey?: string, body?: UserCreate, observe?: 'body', reportProgress?: boolean): Observable<UserClass>;
    createUserNew(authenticationkey?: string, body?: UserCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserClass>>;
    createUserNew(authenticationkey?: string, body?: UserCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserClass>>;
    /**
     *
     *
     * @param email
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    lookupUserByEmail(email: string, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<UserClass>;
    lookupUserByEmail(email: string, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserClass>>;
    lookupUserByEmail(email: string, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserClass>>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    lookupUserById(id: string, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<UserClass>;
    lookupUserById(id: string, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserClass>>;
    lookupUserById(id: string, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserClass>>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    multipleCreate(authenticationkey?: string, number?: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    multipleCreate(authenticationkey?: string, number?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    multipleCreate(authenticationkey?: string, number?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    resetUserPassword(authenticationkey?: string, body?: ResetUserPasswordRequest, observe?: 'body', reportProgress?: boolean): Observable<ResetPasswordFinishResponse>;
    resetUserPassword(authenticationkey?: string, body?: ResetUserPasswordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResetPasswordFinishResponse>>;
    resetUserPassword(authenticationkey?: string, body?: ResetUserPasswordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResetPasswordFinishResponse>>;
}
