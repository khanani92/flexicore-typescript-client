/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Observable } from 'rxjs';
import { FileResource } from '../model/fileResource';
import { Job } from '../model/job';
import { Configuration } from '../configuration';
import { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';
import { IUploadService } from './iUploadService.service';
export declare class UploadService implements IUploadService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteFileResource(md5: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * finalize FileResource , sending it for processing
     * @summary finalize
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param hint
     * @param fileType
     * @param dontProcess
     */
    finalizeUpload(md5: string, authenticationkey?: string, hint?: string, fileType?: string, dontProcess?: boolean, extraHeaders?: Map<String, String>, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFileResource(md5: string, authenticationkey?: string, extraHttpRequestParams?: any, observe?: 'body', reportProgress?: boolean): Observable<FileResource>;
    getFileResource(md5: string, authenticationkey?: string, extraHttpRequestParams?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileResource>>;
    getFileResource(md5: string, authenticationkey?: string, extraHttpRequestParams?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileResource>>;
    /**
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getJob(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param calcMd5
     */
    registerFile(authenticationkey?: string, path?: string, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param hint
     * @param fileType
     * @param dontProcess
     * @param calcMd5
     */
    registerFileAndFinlize(authenticationkey?: string, path?: string, hint?: string, fileType?: string, dontProcess?: boolean, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    stopJob(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param jobID
     * @param phaseName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobPhase(jobID: string, phaseName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param jobID
     * @param key
     * @param value
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobProperty(jobID: string, key: string, value: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    uploadFile(authenticationkey?: string, md5?: string, name?: string, blob?: Blob, extraHttpRequestParams?: any): Observable<FileResource>;
    uploadFileWithChunkMd5(authenticationkey?: string, md5?: string, name?: string, chunkMd5?: string, lastChunk?: boolean, blob?: Blob, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    validate(authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteFileResourceWithHttpInfo(md5: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * finalize
     * finalize FileResource , sending it for processing
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param hint
     * @param fileType
     * @param dontProcess
     */
    finalizeUploadWithHttpInfo(md5: string, authenticationkey?: string, hint?: string, fileType?: string, dontProcess?: boolean, extraHeaders?: Map<String, String>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getJobWithHttpInfo(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param calcMd5
     */
    registerFileWithHttpInfo(authenticationkey?: string, pathparam?: string, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param hint
     * @param fileType
     * @param dontProcess
     * @param calcMd5
     */
    registerFileAndFinlizeWithHttpInfo(authenticationkey?: string, pathparam?: string, hint?: string, fileType?: string, dontProcess?: boolean, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    stopJobWithHttpInfo(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param phaseName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobPhaseWithHttpInfo(jobID: string, phaseName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param key
     * @param value
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobPropertyWithHttpInfo(jobID: string, key: string, value: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
        *
        *
        * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
        * @param body
        */
    uploadFileWithHttpInfo(authenticationkey?: string, md5?: string, name?: string, chunkMd5?: string, lastChunk?: boolean, blob?: Blob, extraHttpRequestParams?: any): Observable<any>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    validateWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
}
