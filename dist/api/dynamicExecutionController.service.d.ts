/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PaginationResponse } from '../model/paginationResponse';
import { Configuration } from '../configuration';
import { CreateDynamicExecution, DynamicExecution, DynamicExecutionExampleRequest, DynamicExecutionFilter, ExecuteDynamicExecution, ExecuteInvokersResponse, UpdateDynamicExecution } from '..';
export declare class DynamicExecutionControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    createDynamicExecution(authenticationKey?: string, body?: CreateDynamicExecution, observe?: 'body', reportProgress?: boolean): Observable<DynamicExecution>;
    createDynamicExecution(authenticationKey?: string, body?: CreateDynamicExecution, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DynamicExecution>>;
    createDynamicExecution(authenticationKey?: string, body?: CreateDynamicExecution, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DynamicExecution>>;
    /**
     * executeInvoker
     * executeInvoker
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    executeDynamicExecution(authenticationKey?: string, body?: ExecuteDynamicExecution, observe?: 'body', reportProgress?: boolean): Observable<ExecuteInvokersResponse>;
    executeDynamicExecution(authenticationKey?: string, body?: ExecuteDynamicExecution, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecuteInvokersResponse>>;
    executeDynamicExecution(authenticationKey?: string, body?: ExecuteDynamicExecution, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecuteInvokersResponse>>;
    getAllDynamicExecutions(authenticationKey?: string, body?: DynamicExecutionFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<DynamicExecution>>;
    getAllDynamicExecutions(authenticationKey?: string, body?: DynamicExecutionFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<DynamicExecution>>>;
    getAllDynamicExecutions(authenticationKey?: string, body?: DynamicExecutionFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<DynamicExecution>>>;
    getDynamicExecutionReturnExample(authenticationKey?: string, body?: DynamicExecutionExampleRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getDynamicExecutionReturnExample(authenticationKey?: string, body?: DynamicExecutionExampleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getDynamicExecutionReturnExample(authenticationKey?: string, body?: DynamicExecutionExampleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    updateDynamicExecution(authenticationKey?: string, body?: UpdateDynamicExecution, observe?: 'body', reportProgress?: boolean): Observable<DynamicExecution>;
    updateDynamicExecution(authenticationKey?: string, body?: UpdateDynamicExecution, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DynamicExecution>>;
    updateDynamicExecution(authenticationKey?: string, body?: UpdateDynamicExecution, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DynamicExecution>>;
}
