/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Observable } from 'rxjs';
import { FileResource } from '../model/fileResource';
import { Configuration } from '../configuration';
import { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';
import { IUploadService } from './iUploadService.service';
export declare class UploadV2Service implements IUploadService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
    *
    *
    * @param body
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    getFileResource(md5?: string, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<FileResource>;
    getFileResource(md5?: string, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileResource>>;
    getFileResource(md5?: string, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileResource>>;
    /**
  *
  *
  * @param body
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */
    uploadFileWithChunkMd5(authenticationkey?: string, md5?: string, name?: string, chunkMd5?: string, lastChunk?: boolean, blob?: Blob, observe?: 'body', reportProgress?: boolean): Observable<FileResource>;
    uploadFileWithChunkMd5(authenticationkey?: string, md5?: string, name?: string, chunkMd5?: string, lastChunk?: boolean, blob?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileResource>>;
    uploadFileWithChunkMd5(authenticationkey?: string, md5?: string, name?: string, chunkMd5?: string, lastChunk?: boolean, blob?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileResource>>;
}
