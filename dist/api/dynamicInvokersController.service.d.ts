/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PaginationResponse } from '../model/paginationResponse';
import { Configuration } from '../configuration';
import { InvokerInfo } from '../model/invokerInfo';
import { DynamicInvokerFilter } from '../model/dynamicInvokerFilter';
import { ExecuteInvokerRequest, ExecuteInvokersResponse } from '..';
export declare class DynamicInvokersControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe?: 'body', reportProgress?: boolean): Observable<ExecuteInvokersResponse>;
    executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecuteInvokersResponse>>;
    executeInvoker(authenticationKey?: string, body?: ExecuteInvokerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecuteInvokersResponse>>;
    /**
       * getAll
       * lists all Invokers
       * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
       * @param body
       * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
       * @param reportProgress flag to report request and response progress.
       */
    getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<InvokerInfo>>;
    getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<InvokerInfo>>>;
    getAll(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<InvokerInfo>>>;
    getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<InvokerInfo>>;
    getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<InvokerInfo>>>;
    getAllInvokerHolders(authenticationKey?: string, body?: DynamicInvokerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<InvokerInfo>>>;
}
